<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Geek&#39;s Notes</title>
        <link>Homepage link</link>
        <description>Geeks Note for Embedded System</description>
        <lastBuildDate>Sat, 09 Jul 2016 13:28:53 +0800</lastBuildDate>
        <language>zh-cn</language>
        
        <item>
            <title>代码行数统计工具</title>
            <link>Homepage link/articles/code-counting-tools.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/code-counting-tools.html</guid>
            <author>edgar1470@gmail.com Edgar.Wu</author>
            <pubDate>Thu, 16 Jan 2014 16:48:19 +0800</pubDate>
            <description>&lt;p&gt;在HW工作时经常用来衡量工作量（数量和质量）的一个重要指标就是：你这个功能需要写多少行代码？
那个时段项目组的代码库基线指标是一个人50行／天, 刚开始听到这个数字的感觉：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好保守的数字&lt;/li&gt;
&lt;li&gt;这样是要磨洋工的好借口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但做了一段时间后，才发现在多人协作的大型开发项目中提出这个基线指标是有丈量依据和事实数据支撑的。&lt;/p&gt;
&lt;p&gt;下面这个工具&lt;a href=&quot;https://github.com/AlDanial/cloc&quot;&gt;cloc&lt;/a&gt; 可以用于实际编码中的代码量统计：&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;h3 id=&quot;cloc-overview&quot;&gt;cloc Overview&lt;/h3&gt;
&lt;p&gt;cloc counts blank lines, comment lines, and physical lines of source code in many programming languages. Given two versions of a code base, cloc can compute differences in blank, comment, and source lines. It is written entirely in Perl with no dependencies outside the standard distribution of Perl v5.6 and higher (code from some external modules is embedded within cloc) and so is quite portable. cloc is known to run on many flavors of Linux, FreeBSD, NetBSD, OpenBSD, Mac OS X, AIX, HP-UX, Solaris, IRIX, z/OS, and Windows. (To run the Perl source version of cloc on Windows one needs ActiveState Perl 5.6.1 or higher, Strawberry Perl, Cygwin, or MobaXTerm with the Perl plug-in installed. Alternatively one can use the Windows binary of cloc generated with perl2exe to run on Windows computers that have neither Perl nor Cygwin.)&lt;/p&gt;
&lt;p&gt;cloc contains code from David Wheeler&#39;s SLOCCount, Damian Conway and Abigail&#39;s Perl module Regexp::Common, Sean M. Burke&#39;s Perl module Win32::Autoglob, and Tye McQueen&#39;s Perl module Algorithm::Diff. Language scale factors were derived from Mayes Consulting, LLC web site &lt;a href=&quot;http://softwareestimator.com/IndustryData2.htm&quot;&gt;http://softwareestimator.com/IndustryData2.htm&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;why-use-cloc&quot;&gt;Why Use cloc&lt;/h3&gt;
&lt;p&gt;cloc has many features that make it easy to use, thorough, extensible, and portable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exists as a single, self-contained file that requires minimal installation effort---just download the file and run it.&lt;/li&gt;
&lt;li&gt;Can read language comment definitions from a file and thus potentially work with computer languages that do not yet exist.&lt;/li&gt;
&lt;li&gt;Allows results from multiple runs to be summed together by language and by project.&lt;/li&gt;
&lt;li&gt;Can produce results in a variety of formats: plain text, SQL, XML, YAML, comma separated values.&lt;/li&gt;
&lt;li&gt;Can count code within compressed archives (tar balls, Zip files, Java .ear files).&lt;/li&gt;
&lt;li&gt;Has numerous troubleshooting options.&lt;/li&gt;
&lt;li&gt;Handles file and directory names with spaces and other unusual characters.&lt;/li&gt;
&lt;li&gt;Has no dependencies outside the standard Perl distribution.&lt;/li&gt;
&lt;li&gt;Runs on Linux, FreeBSD, NetBSD, OpenBSD, Mac OS X, AIX, HP-UX, Solaris, IRIX, and z/OS systems that have Perl 5.6 or higher. The source version runs on Windows with either ActiveState Perl, Strawberry Perl, Cygwin, or MobaXTerm+Perl plugin. Alternatively on Windows one can run the Windows binary which has no dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cloc-usage&quot;&gt;cloc usage&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;$ ./cloc-1.55.pl /cygdrive/d/source/65X/NT9665x_CarDV_20141013
lsUse of qw(...) as parentheses is deprecated at ./cloc-1.55.pl line 1841.         
          1814 text files.
          1696 unique files.
          45 files ignored.

          http://cloc.sourceforge.net v 1.55  T=16.0 s (103.2 files/s, 29969.2 lines/s)
          -------------------------------------------------------------------------------
          Language                     files          blank        comment           code
          -------------------------------------------------------------------------------
          C                              466          28407          51002         206452
          C/C++ Header                   721          20749          42535          55748
          D                              369          23225              0          46732
          make                            83            807           1576           1949
          DOS Batch                       11             45              0            230
          Assembly                         1              6             26             18
          -------------------------------------------------------------------------------
          SUM:                          1651          73239          95139         311129
          -------------------------------------------------------------------------------
&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>C代码片段</title>
            <link>Homepage link/articles/c-tips.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/c-tips.html</guid>
            <author>edgar1470@gmail.com Edgar.Wu</author>
            <pubDate>Thu, 16 Jan 2014 15:42:30 +0800</pubDate>
            <description>&lt;p&gt;C Tips
&lt;!-- toc --&gt;&lt;/p&gt;
&lt;h3 id=&quot;程序执行时间测试&quot;&gt;程序执行时间测试&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/4e2ess30.aspx&quot;&gt;Calculates the wall-clock time used by the calling process.&lt;/a&gt;
The clock function tells how much wall-clock time the calling process has used. Note that this is not strictly conformant with ISO C99, which specifies net CPU time as the return value. To obtain CPU time, use the Win32 GetProcessTimes function.
A timer tick is approximately equal to 1/CLOCKS_PER_SEC seconds. Given enough time, the value returned by clock can exceed the maximum positive value of clock_t and become negative, or exceed the maximum absolute value and roll over. Do not rely on this value for total elapsed time in processes that run for more than 214,748 seconds, or about 59 hours.&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-c&quot;&gt;// crt_clock.c
// This example prompts for how long
// the program is to run and then continuously
// displays the elapsed time for that period.
//

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

void sleep( clock_t wait );

int main( void )
{
   long    i = 6000000L;
   clock_t start, finish;
   double  duration;

   // Delay for a specified time.
   printf( &quot;Delay for three seconds\n&quot; );
   sleep( (clock_t)3 * CLOCKS_PER_SEC );
   printf( &quot;Done!\n&quot; );

   // Measure the duration of an event.
   printf( &quot;Time to do %ld empty loops is &quot;, i );
   start = clock();
   while( i-- ) 
      ;
   finish = clock();
   duration = (double)(finish - start) / CLOCKS_PER_SEC;
   printf( &quot;%2.1f seconds\n&quot;, duration );
}

// Pauses for a specified number of milliseconds.
void sleep( clock_t wait )
{
   clock_t goal;
   goal = wait + clock();
   while( goal &gt; clock() )
      ;
}
&lt;/pre&gt;
&lt;h3 id=&quot;自动转换代码&quot;&gt;自动转换代码&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.parashift.com/c++-faq/convert-to-c.html&quot;&gt;Is it possible to convert C++ to C?&lt;/a&gt; 答案是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NO. 不能把C++代码自动转换成可读性和可维护性的C代码&lt;/li&gt;
&lt;li&gt;YES. 能自动转换,但有很多限制
&lt;a href=&quot;http://llvm.org/releases/3.1/docs/FAQ.html#translatecxx&quot;&gt;Can I use LLVM to convert C++ code to C code?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes, you can use LLVM to convert code from any language LLVM supports to C. Note that the generated C code will be very low level (all loops are lowered to gotos, etc) and not very pretty (comments are stripped, original source formatting is totally lost, variables are renamed, expressions are regrouped), so this may not be what you&#39;re looking for. Also, there are several limitations noted below.&lt;/p&gt;
&lt;p&gt;在google 怎么用llvm 转换C++源代码到C源代码时,发现了这个 &lt;a href=&quot;http://llvm.org/releases/3.1/docs/ReleaseNotes.html#changes&quot;&gt;http://llvm.org/releases/3.1/docs/ReleaseNotes.html#changes&lt;/a&gt; LLVM 从3.1版本就不再支持从其它语言转换成C源代码的功能 但转换成汇编的功能继续可用&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;$ clang –c –emit-llvm –o test.bc test.c
$ opt –O1 –o test.bc test.bc
$ llc –o test.s test.bc
$ gcc –o test test.s
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Source-to-source_compiler&quot;&gt;http://en.wikipedia.org/wiki/Source-to-source_compiler&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>git实用技巧</title>
            <link>Homepage link/articles/git-tips.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/git-tips.html</guid>
            <author>edgar1470@gmail.com Edgar.Wu</author>
            <pubDate>Fri, 08 Jul 2016 00:23:14 +0800</pubDate>
            <description>&lt;p&gt;GIT Tips
&lt;!-- toc --&gt;&lt;/p&gt;
&lt;h3 id=&quot;在bash提示符显示当前的git分支&quot;&gt;在bash提示符显示当前的git分支&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://makandracards.com/makandra/524-show-the-current-git-branch-on-your-bash-prompt&quot;&gt;Show the current Git branch on your Bash pro&lt;/a&gt;
Append this to your ~/.bashrc:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;export PS1=&#39;\[\033[01;32m\]\h\[\033[01;34m\] \w\[\033[31m\]$(__git_ps1 &quot;(%s)&quot;) \[\033[01;34m\]$\[\033[00m\] &#39;
&lt;/pre&gt;
&lt;p&gt;Reload the changes by saying&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;source ~/.bashrc
&lt;/pre&gt;
&lt;h3 id=&quot;本地svn仓库转换成git仓库&quot;&gt;本地SVN仓库转换成git仓库&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;git svn clone file:///media/sf_D_DRIVE/test_svn_repos test.git
&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>imagemagick实用技巧</title>
            <link>Homepage link/articles/imagemagick-tips.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/imagemagick-tips.html</guid>
            <author>edgar1470@gmail.com Edgar.Wu</author>
            <pubDate>Fri, 08 Jul 2016 00:12:36 +0800</pubDate>
            <description>&lt;p&gt;ImageMagick Tips
&lt;!-- toc --&gt;&lt;/p&gt;
&lt;h3 id=&quot;给图片添加中文字符水印&quot;&gt;给图片添加中文字符水印&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;  #!/bin/bash
  mogrify -font msyh.ttf -pointsize 64 -fill red -weight bolder -gravity southeast -annotate +20+20 @&quot;t.txt&quot; src.jpg
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;msyh.ttf 是水印使用的字体,可以指定路径 /font/xx.ttf&lt;/li&gt;
&lt;li&gt;64 水印字体大小&lt;/li&gt;
&lt;li&gt;t.txt 文件中包含了一行水印描述，字体文件支持的所以编码空间中的字符都可以&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>vim实用技巧</title>
            <link>Homepage link/articles/vim-tips.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/vim-tips.html</guid>
            <author>edgar1470@gmail.com Edgar.Wu</author>
            <pubDate>Thu, 07 Jul 2016 23:53:43 +0800</pubDate>
            <description>&lt;h2 id=&quot;vim-tips&quot;&gt;VIM Tips&lt;/h2&gt;
&lt;!-- toc --&gt;
&lt;h3 id=&quot;快速插入当前时间到文本中&quot;&gt;快速插入当前时间到文本中&lt;/h3&gt;
&lt;p&gt;来源&lt;a href=&quot;http://stackoverflow.com/questions/56052/best-way-to-insert-timestamp-in-vim/58604#58604&quot;&gt;best way to insert timestamp in vim&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;nmap &lt;F3&gt; i&lt;C-R&gt;=strftime(&quot;%Y-%m-%d %a %I:%M %p&quot;)&lt;CR&gt;&lt;Esc&gt;
imap &lt;F3&gt; &lt;C-R&gt;=strftime(&quot;%Y-%m-%d %a %I:%M %p&quot;)&lt;CR&gt;
&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>超级电容电量的简易计算方法</title>
            <link>Homepage link/articles/super-capacitor.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/super-capacitor.html</guid>
            <author>edgar1470@gmail.com Edgar.Wu</author>
            <pubDate>Sun, 12 Jan 2014 22:44:50 +0800</pubDate>
            <description>&lt;h3 id=&quot;网络文章-a-href-http-wwwgeek-workshopcom-thread-2114-1-1html-超级电容电量简易计算方法-a-&quot;&gt;网络文章 &lt;a href=&quot;http://www.geek-workshop.com/thread-2114-1-1.html&quot;&gt;超级电容电量简易计算方法&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;电压(V) = 电流(I) x 电阻(R)
电荷量(Q) = 电流(I) x 时间(T)
功率(P) = V x I
能量(W) = P x T = Q x V
容量 F= 库伦（C） / 电压（V）
&lt;/pre&gt;&lt;p&gt;将容量、电压转为等效电量 &lt;/p&gt;
&lt;pre&gt;电量 =电压（V) x 电荷量（C）
&lt;/pre&gt;&lt;h3 id=&quot;实例估算：&quot;&gt;实例估算：&lt;/h3&gt;
&lt;p&gt;电压5.5V 1F（1法拉电容）的电量为5.5C（库伦）， 电压下限我们设定在3.8V，电容放电的有效电压差为5.5-3.8=1.7V，所以有效电量为1.7C。
1.7C=1.7A*S（安秒）=1700mAS（毫安秒）=0.472mAh（毫安时） 若电流消耗以10mA计算，1700mAS/10mA=170S=2.83min（维持时间分钟） so，这样大家就能非常简单的计算出超级电容的等效电池容量，方便自己选型。顺便计算电容的漏电速度。。。。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>使用papery写blog</title>
            <link>Homepage link/articles/use-papery-write-blog.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/use-papery-write-blog.html</guid>
            <author>edgar1470@gmail.com Edgar.Wu</author>
            <pubDate>Wed, 08 Jan 2014 16:33:11 +0800</pubDate>
            <description>&lt;p&gt;按照&lt;a href=&quot;https://github.com/ericzhang-cn/papery&quot;&gt;papery&lt;/a&gt; 的说明就能非常顺利的完成安装和搭建blog的工作。
从简洁和实用的角度，papery值得尝试和实用！&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
